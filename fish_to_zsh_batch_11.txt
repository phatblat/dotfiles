# Additional converted Fish functions (Batch 11)

# debug - Prints args only when debug env var is set
function debug() {
    if [[ -n "$debug" ]]; then
        echo "DEBUG:" "$@"
    fi
}

# dash - Dash shell integration
function dash() {
    local query="$1"
    if [[ -z "$query" ]]; then
        echo "Usage: dash query   (prefix query with 'docset_name:' to limit)"
        return 1
    fi
    
    open "dash://$query"
}

# tube - Quick nav to Tube project
function tube() {
    pushd ~/dev/jenkins/Tube
}

# mt - Short alias for git mergetool
function mt() {
    git mergetool "$@"
}

# gpgkeyid - Prints the long format key identifiers of all GPG keys found
function gpgkeyid() {
    gpg --list-secret-keys \
            --keyid-format short \
        | egrep -o "^sec.*/\w+" \
        | cut -d "/" -f 2
}

# dit - Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
function dit() {
    docker image tag "$@"
}

# suri - Init and update git submodules recursively
function suri() {
    git submodule update --recursive --init "$@"
}

# rebase - Git rebase
function rebase() {
    git rebase "$@"
}

# pcopy - Copy the current dir path into the pasteboard
function pcopy() {
    pwd | xargs echo -n | pbcopy
}

# cfrmodel - Quick dir nav to CFR Model project
function cfrmodel() {
    pushd ~/dev/realm/ClinicalFacilityRealmModel
}

# xcinit - Runs Xcode new_project.rb ruby script
function xcinit() {
    ~/.dotfiles/xcode/new_project.rb "$@"
}

# git_inside_repo - Detects whether $PWD is inside a git repo or not
function git_inside_repo() {
    git rev-parse --is-inside-work-tree >/dev/null 2>&1
}

# ddd - Delete Derived Data
function ddd() {
    if [[ -z "$DERIVED_DATA" ]]; then
        echo "DERIVED_DATA is not set"
        return 1
    fi
    
    if [[ -d "$DERIVED_DATA" ]]; then
        echo "Deleting derived data directory $DERIVED_DATA"
        rm -rf "$DERIVED_DATA"
    else
        echo "Derived data directory does not exist"
    fi
}

# xcsp - Show the currently selected version of Xcode
function xcsp() {
    xcode-select --print-path "$@"
}

# masd - Quick nav to mas dir
function masd() {
    local repo_url="git@github.com:mas-cli/mas.git"
    local base_dir="~/dev/mas-cli"
    local local_dir="$base_dir/mas"
    
    # Create parent directories
    mkdir -p "$base_dir"
    
    clone_or_pull "$local_dir" "$repo_url"
    
    pushd "$local_dir"
}

# cat - Wrapper for bat because I can never remember
function cat() {
    bat "$@"
}

# big - Install gem bundle using the local Gemfile
function big() {
    bundle install --gemfile=Gemfile
}

# git-plist-filter - Converts plist data to XML format (stdin->stdout)
function git-plist-filter() {
    # had to do this because git doesn't like attaching stdin and out to plutil (waitpid error)
    
    # TMPDIR isn't set for ssh logins!
    local TMPDIR="${TMPDIR:-$(getconf DARWIN_USER_TEMP_DIR)}"
    local function_name="git-plist-filter"
    
    local TMPFILE=$(mktemp "$TMPDIR/$function_name.XXXXXX")
    
    # Drop stdin to temp file
    cat > "$TMPFILE"
    plutil -convert xml1 "$TMPFILE"
    cat "$TMPFILE"
    rm "$TMPFILE"
}

# headshort - Prints a 7-character abbreviated sha1 hash of the current HEAD commit
function headshort() {
    git rev-parse --short HEAD
}

# log10 - Alias for git log
function log10() {
    git log -10 --pretty=fuller "$@"
}
