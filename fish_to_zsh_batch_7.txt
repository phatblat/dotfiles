# Additional converted Fish functions (Batch 7)

# gpgcopypub - Copies the public key for any GPG key found
function gpgcopypub() {
    local keyid=$(gpgkeyid)
    local gpg_key_ascii=$(gpg --armor --export "$keyid")
    echo "$gpg_key_ascii" | pbcopy
    echo "GPG key copied to pasteboard (keyid: $keyid)"
}

# gw - Invokes a build using the Gradle wrapper script
function gw() {
    if [[ -e ./gradlew ]]; then
        ./gradlew "$@"
        return
    fi
    
    echo "There is no Gradle wrapper in the current dir."
    gradle "$@"
}

# provisioning_print - Prints a text version of a provisioning profile
function provisioning_print() {
    local profile_path="$1"
    if [[ -z "$profile_path" ]]; then
        echo "Usage: provisioning_print path/to/profile.mobileprovision"
        return 1
    fi
    
    if [[ ! -e "$profile_path" ]]; then
        echo "$profile_path does not exist"
        return 2
    fi
    
    security cms -D -i "$profile_path" 2>/dev/null
}

# appcast_url - Calculate appcast checkpoint
function appcast_url() {
    local url="$1"
    if [[ -z "$url" ]]; then
        echo "Usage: appcast_url url"
        return 1
    fi
    
    brew cask _appcast_checkpoint --calculate "$url"
}

# xv - Prints Xcode version information
function xv() {
    xcodebuild -version "$@"
}

# edit - Edit using the configured VISUAL editor (TextMate) for GUI terminal sessions or EDITOR for CLI (SSH) sessions
function edit() {
    if [[ -z "$VISUAL" ]]; then
        eval "$EDITOR '$*'"
    else
        eval "$VISUAL '$*'"
    fi
}

# upmodule - Optionally invokes an upstall module (converted from ⬆️_upmodule)
function upmodule() {
    local module_function="$1"
    local display_name="$2"
    local include_flag="$3"
    local skip_flag="$4"
    shift 4
    local original_args=("$@")
    
    # no args
    if [[ -z "$module_function" ]]; then
        echo "Usage: upmodule module_function [display_name include_flag skip_flag original_args]"
        return 1
    fi
    
    if ! command -v "$module_function" >/dev/null 2>&1; then
        echo "Unknown function: $module_function"
        return 2
    fi
    
    # 1 arg
    if [[ $# -eq 0 && -z "$display_name" ]]; then
        repeatchar -
        eval "$module_function"
    
    # 4+ args
    elif [[ -n "$display_name" && -n "$include_flag" && -n "$skip_flag" ]]; then
        if ! command -v "$module_function" >/dev/null 2>&1; then
            echo "Unknown function: $module_function"
            return 4
        fi
        
        if [[ " ${original_args[*]} " =~ " $skip_flag " ]]; then
            # Skip module if skip flag was given
            repeatchar -
            echo "$display_name (skipped)"
        elif [[ " ${original_args[*]} " =~ " $include_flag " ]]; then
            # Run module if asked for
            repeatchar -
            eval "$module_function"
        else
            # Otherwise, skip
            # echo "$display_name (skipped)"
            :
        fi
    else
        echo "Usage: upmodule module_function [display_name include_flag skip_flag original_args]"
        return 2
    fi
}

# s - Display abbreviated git status
function s() {
    git status -sb "$@"
}

# fq - Check for existence of a function
function fq() {
    local function_name="$1"
    local file="~/.config/fish/functions/$function_name.fish"
    
    command -v "$function_name" >/dev/null 2>&1 || [[ -e "$file" ]]
}

# branch - Manage git branches
function branch() {
    git branch "$@"
}
