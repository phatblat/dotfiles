# Additional converted Fish functions (Batch 5)

# erase - Erase fish functions
function erase() {
    functions --erase "$@"
}

# rubygems - Installs and updates Ruby gems (converted from ðŸ’Ž_rubygems)
function rubygems() {
    echo "ðŸ’Ž Updating Ruby Gems"
    echo
    
    if user_is_admin; then
        # Workaround to no access to /usr/bin on Sierra
        # Updating rubygems-update
        gem update --system
        gem update
        
        # Bundler
        gem install bundler
    fi
}

# untracked - Displays files not tracked in the current git repo
function untracked() {
    git ls-files --others --exclude-standard "$@"
}

# amendne - Amend previous commit without editing the message
function amendne() {
    git commit --verbose --amend --no-edit "$@"
}

# apv - Quick nav to ApplePlatformVersions dir
function apv() {
    local apv_dir="~/dev/ApplePlatformVersions"
    
    if [[ ! -d "$apv_dir" ]]; then
        cd ~/dev
        git clone git@github.com:phatblat/ApplePlatformVersions.git
    else
        cd "$apv_dir"
        git pull
    fi
    
    lg10
}

# be - Short alias for executing gems through Bundler
function be() {
    bundle exec "$@"
}

# realmos - Manage Realm Object Server
function realmos() {
    local command="$1"
    echo "Realm Object Server"
    
    if [[ ! -e "$REALM_OBJECT_SERVER_PATH" ]]; then
        echo "No such path: $REALM_OBJECT_SERVER_PATH"
        return 1
    fi
    
    case "$command" in
        start)
            echo "Starting ROS at $REALM_OBJECT_SERVER_PATH"
            eval "$REALM_OBJECT_SERVER_PATH/start-object-server.command"
            ;;
        *)
            echo "Usage: realmos [start]"
            ;;
    esac
}

# bisect - Git bisect
function bisect() {
    git bisect "$@"
}

# ccu - Update dependencies without building using Carthage
function ccu() {
    carthage update --no-use-binaries --no-build "$@"
}

# shell_switch - Changes the current $USER's shell using dscl
function shell_switch() {
    local new_shell="$1"
    if [[ -z "$new_shell" ]]; then
        echo "Usage: shell_switch bash|zsh|fish"
        return 1
    fi
    
    local brew_binaries=$(brew --prefix)/bin
    local new_shell_path="$brew_binaries/$new_shell"
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        chsh --shell "$new_shell_path"
        return $?
    fi
    
    local cmd="sudo dscl . -change $HOME UserShell $SHELL $new_shell_path"
    
    if [[ "$(basename $SHELL)" != "$new_shell" ]]; then
        if user_is_admin; then
            eval "$cmd"
            echo -n "Changed "$(dscl . -read $HOME UserShell)
            echo
            eval "$new_shell_path"
        else
            echo "Have an admin run the following command:"
            echo "    $cmd"
            return
        fi
    else
        echo "No changes."
        return
    fi
}

