# Additional converted Fish functions (Batch 9)

# showsvn - Show .svn directories in the current directory tree
function showsvn() {
    find . -type d -name .svn "$@"
}

# xps - Short alias for displaying nginx status
function xps() {
    xstatus "$@"
}

# log - Alias for `git log`
function log() {
    git log --pretty=fuller "$@"
}

# gwo - Gradle wrapper offline
function gwo() {
    gw "$@" --offline
}

# showcert - Prints server certificate file details
function showcert() {
    local cert_file="$1"
    if [[ ! -e "$cert_file" ]]; then
        echo "Usage: showcert cert_file"
        return 1
    fi
    
    eval "$OPENSSL_PATH x509 -in $cert_file -inform DER -text -noout"
}

# gv - Prints gradle version
function gv() {
    local output=$(gradle --version)
    local gradle_version=$(echo "$output" | sed -n '3p' | awk '{print $2}')
    echo "$gradle_version"
}

# htoptions - Send an HTTP request using the OPTIONS method using burl
function htoptions() {
    burl OPTIONS "$@"
}

# brew_logs - Quick nav to Homebrew logs dir
function brew_logs() {
    pushd ~/Library/Logs/Homebrew/
}

# mdk - Quick nav to MDK
function mdk() {
    local platform="$1"
    local path="~/dev/mdk"
    
    if [[ -n "$platform" ]]; then
        case "$platform" in
            i|ios)
                path="$path/ios" ;;
            a|android)
                path="$path/android" ;;
        esac
    fi
    
    pushd "$path"
}

# lggrep - Grep through lightweight log `lg` for a regex pattern
function lggrep() {
    local pattern="$1"
    if [[ -z "$pattern" ]]; then
        echo "Usage: lggrep '.*'"
        return 1
    fi
    
    lg -G "$pattern"
}

# assume - Ignore changes to the given files
function assume() {
    git update-index --assume-unchanged "$@"
}

# bq - Query brew information
function bq() {
    if [[ -z "$*" ]]; then
        cat <<EOF
Usage: bq [formula_name] [-- jq_filter]
Filter examples: 
  formula                                                                           (raw json, filter with grep to find keys)
  formula -- .[0].name                                                              (formula name)
  formula -- .[0].linked_keg                                                        (active version)
  --installed -- 'map(select(.keg_only == true and .linked_keg != null) | .name)'   (names of linked keg-only formulae)
EOF
        return 1
    fi
    
    local brew_args=()
    local jq_args=()
    local collecting_jq=false
    
    for arg in "$@"; do
        if [[ "$arg" == "--" ]]; then
            collecting_jq=true
            continue
        fi
        
        if [[ "$collecting_jq" == true ]]; then
            jq_args+=("$arg")
        else
            brew_args+=("$arg")
        fi
    done
    
    if [[ ${#jq_args[@]} -eq 0 ]]; then
        jq_args=(".")
    fi
    
    brew info --json=v1 "${brew_args[@]}" | jq "${jq_args[@]}"
}

# configg - Manage global git configuration (~/.gitconfig)
function configg() {
    git config --global "$@"
}

# spotlight_reload - Reloads Spotlight which triggers a re-index
function spotlight_reload() {
    spotlight_disable
    
    sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
    sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
    
    spotlight_enable
}

# icloud - Changes directory to ICLOUD_HOME
function icloud() {
    pushd "$ICLOUD_HOME" "$@"
}

# ane - Git amend, without changing the commit message
function ane() {
    git commit --amend --no-edit
}

# reload - Reloads a single function or the entire fish shell
function reload() {
    local function_name="$1"
    local file="~/.config/fish/functions/$function_name.fish"
    
    if [[ -z "$function_name" ]]; then
        source ~/.zshrc
        return
    elif [[ -e "$file" ]]; then
        source "$file"
        if [[ $? -ne 0 ]]; then
            return $?
        fi
        # TODO: Show diff of function (memory vs file system)
        # func $function_name
    else
        echo "$function_name does not exist in function autoload dir."
        return 1
    fi
}

# gc - Run git garbage collection
function gc() {
    git gc --prune=now
}

# stsave - Save a git stash
function stsave() {
    git stash push --include-untracked "$@"
}

# chexe - Set executable permissions
function chexe() {
    local files="$*"
    if [[ -z "$files" ]]; then
        files="*.sh"
    fi
    chmod +x $files
}
