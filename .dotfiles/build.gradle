//
// build.gradle
// .dotfiles
//

// -----------------------------------------------------------------------------
// ZSH -> Fish Shell Migration Tasks

FileTree zshFiles = fileTree(projectDir) {
    include '**/*.zsh'
    //exclude '**/*.old'
}

task listFiles {
    description "Lists files which will be migrated from ZSH to Fish Shell."
    group ".dotfiles"

//    inputs.files zshFiles

    zshFiles.each { File file ->
        logger.debug "${file}"
    }
}

task convertAliasToFunction {
    description "Converts a bash/zsh alias into a fish function."
    group ".dotfiles"

    dependsOn listFiles
    inputs.files zshFiles

    doLast {
        def pattern = ~/^alias ([^=]+)=['"]([^#]+)['"]( +# )?([^#]+)?/

        Integer matchCount = 0
        zshFiles.each { File file ->
            logger.debug "${file}"
            file.eachLine { String line ->
                def matcher = line =~ pattern
                if (matcher.matches()) {
                    matchCount += 1
                    logger.debug "*** ${line}"
                    logger.debug "1: ${matcher.group(1)}"
                    logger.debug "2: ${matcher.group(2)}"
                    logger.debug "3: ${matcher.group(3)}"
                    logger.debug "4: ${matcher.group(4)}"

                    String functionName = matcher.group(1)
                    String functionBody = matcher.group(2)
                    String functionComment = matcher.group(4) ?: ""

                    File fishFunction = new File("fish/functions/${functionName}.fish")

                    // Existing files are overwritten
                    fishFunction.text = """# ${functionComment}
function ${functionName}
    ${functionBody} \$argv
end

"""
                    String action = "created"
                    if (fishFunction.exists()) {
                        action = "modified"
                    }
                    logger.lifecycle "${fishFunction} function ${action}"
                }
            }
        }
        logger.debug "matches: ${matchCount}"
        assert matchCount == 265
    }
}

task portFunctions {
    description "Ports bash/zsh functions to fish."
    group ".dotfiles"

    dependsOn listFiles
    inputs.files zshFiles

    doLast {}
}

task portVariables {
    description "Ports bash/zsh variables to fish."
    group ".dotfiles"

    dependsOn listFiles
    inputs.files zshFiles

    doLast {
        def pattern = ~/^.*export ([a-zA-Z_]+)=['"]?([^'"]+)['"]?.*/

        Integer matchCount = 0
        zshFiles.each { File file ->
            logger.lifecycle "${file}"
            file.eachLine { String line ->
                def matcher = line =~ pattern
                if (matcher.matches()) {
                    matchCount += 1
                    logger.lifecycle "*** ${line}"
                    logger.lifecycle "1: ${matcher.group(1)}"
                    logger.lifecycle "2: ${matcher.group(2)}"

                    String variableName = matcher.group(1)
                    String variableBody = matcher.group(2)
/*                    String functionComment = matcher.group(4) ?: ""*/

                    File variableFile = new File("fish/variables.fish")

                    // Existing files are overwritten
                    variableFile.append "\nset --export ${variableName} ${variableBody}"
                    logger.lifecycle "Added ${variableName} to ${variableFile}"
                }
            }
        }
        logger.lifecycle "matches: ${matchCount}"
        assert matchCount == 32
    }
}

// -----------------------------------------------------------------------------
// Gradle Wrapper

wrapper {
    gradleVersion = '3.5'
    distributionType = 'ALL'
}
