# Additional converted Fish functions (Batch 4)

# fileowner - Displays the owner of a file
function fileowner() {
    local file="$1"
    if [[ -z "$file" ]]; then
        echo "Usage: fileowner file"
        return 1
    fi
    
    if [[ "$OSTYPE" == "darwin"* ]]; then
        ls -ld "$file" | awk '{print $3}'
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        stat --format=%U "$file"
    fi
}

# dil - List docker images
function dil() {
    docker images "$@"
}

# user.name - Manages the user.name git configuration setting
function user.name() {
    git config user.name "$@"
}

# xc - Xcode wrapper function
function xc() {
    if [[ -f Package.swift ]]; then
        echo "Opening swift package"
        open Package.swift "$@"
        return
    fi
    
    # Find workspaces (ignore ones inside xcodeproj bundle)
    local workspaces=( $(find . -name "*.xcworkspace" -not -path "*/project.xcworkspace*" 2>/dev/null) )
    if [[ ${#workspaces[@]} -gt 0 ]]; then
        printf '%s\n' "${workspaces[@]}"
        if [[ -d "${workspaces[1]}" ]]; then
            echo "Opening first workspace"
            open "${workspaces[1]}" "$@"
            return
        fi
    fi
    
    # Find projects (ignore CocoaPods projects)
    local projects=( $(find . -name "*.xcodeproj" -not -name "Pods.xcodeproj" 2>/dev/null) )
    if [[ ${#projects[@]} -gt 0 ]]; then
        printf '%s\n' "${projects[@]}"
        if [[ -d "${projects[1]}" ]]; then
            echo "Opening first project"
            open "${projects[1]}" "$@"
            return
        fi
    fi
    
    echo "No Xcode projects found in the current directory."
    return 1
}

# xcvmget - Show a live list of Xcode versions available to download
function xcvmget() {
    bundle exec ruby -e "
        class Xcode
          attr_reader :date_modified
          attr_reader :name
          attr_reader :path
          attr_reader :url
          attr_reader :version
          attr_reader :release_notes_url

          def initialize(json, url = nil, release_notes_url = nil)
            if url.nil?
              @date_modified = json['dateModified'].to_i
              @name = json['name'].gsub(/^Xcode /, '')
              @path = json['files'].first['remotePath']
              url_prefix = 'https://developer.apple.com/devcenter/download.action?path='
              @url = \"#{url_prefix}#{@path}\"
              @release_notes_url = \"#{url_prefix}#{json['release_notes_path']}\" if json['release_notes_path']
            else
              @name = json
              @path = url.split('/').last
              url_prefix = 'https://developer.apple.com/'
              @url = \"#{url_prefix}#{url}\"
              @release_notes_url = \"#{url_prefix}#{release_notes_url}\"
            end

            begin
              @version = Gem::Version.new(@name.split(' ')[0])
            rescue
              @version = Gem::Version.new('4.3')
            end
          end

          def to_s
            \"Xcode #{version} -- #{url}\"
          end

          def ==(other)
            date_modified == other.date_modified && name == other.name && path == other.path &&
              url == other.url && version == other.version
          end

          def self.new_prerelease(version, url, release_notes_path)
            new('name' => version,
                'files' => [{ 'remotePath' => url.split('=').last }],
                'release_notes_path' => release_notes_path)
          end
        end

        require 'spaceship'

        def spaceship
          @spaceship ||= begin
            begin
              Spaceship.login(ENV['XCODE_INSTALL_USER'], ENV['XCODE_INSTALL_PASSWORD'])
            rescue Spaceship::Client::InvalidUserCredentialsError
              \$stderr.puts 'The specified Apple developer account credentials are incorrect.'
              exit(1)
            rescue Spaceship::Client::NoUserCredentialsError
              \$stderr.puts 'Please provide your Apple developer account credentials via the XCODE_INSTALL_USER and XCODE_INSTALL_PASSWORD environment variables.'
              exit(1)
            end

            if ENV.key?('XCODE_INSTALL_TEAM_ID')
              Spaceship.client.team_id = ENV['XCODE_INSTALL_TEAM_ID']
            end
            Spaceship.client
          end
        end

        json = spaceship.send(:request, :get,
                                '/services-account/QH65B2/downloadws/listDownloads.action',
                                start: '0',
                                limit: '1000',
                                sort: 'dateModified',
                                dir: 'DESC',
                                searchTextField: '',
                                searchCategories: '',
                                search: 'false').body

        def parse_seedlist(seedlist)
          seeds = Array(seedlist['downloads']).select do |t|
            /^Xcode [0-9]/.match(t['name'])
          end

          minimum_version = Gem::Version.new('4.3')
          xcodes = seeds.map { |x| Xcode.new(x) }.reject { |x| x.version < minimum_version }.sort do |a, b|
            a.date_modified <=> b.date_modified
          end

          xcodes.select { |x| x.url.end_with?('.dmg') || x.url.end_with?('.xip') }
        end

        xcodes = parse_seedlist(json)
        puts xcodes.map(&:name)
    "
}

# dnr - Remove one or more docker networks
function dnr() {
    docker network rm "$@"
}

# pick - Short alias for cherry-pick
function pick() {
    git cherry-pick "$@"
}

# objg - Quick nav to Objective-Git
function objg() {
    pushd ~/dev/libgit2/objective-git
}

# merge-base - Git merge-base wrapper
function merge-base() {
    git merge-base "$@"
}

# bog - Update gem bundle using the local Gemfile
function bog() {
    bo --gemfile=Gemfile
}

# mpv - Quick nav to MicrosoftPlatformVersions dir
function mpv() {
    local mpv_dir=~/dev/MicrosoftPlatformVersions
    
    if [[ ! -d "$mpv_dir" ]]; then
        cd ~/dev
        git clone git@github.com:phatblat/MicrosoftPlatformVersions.git
    else
        cd "$mpv_dir"
        git pull
    fi
    
    lg10
}

# dpu - Builds, (re)creates, starts, and attaches to containers for a service
function dpu() {
    docker compose up --detach "$@"
}

# gpgtest - Test GPG key with passphrase
function gpgtest() {
    local key_id="$1"
    local passphrase="$2"
    if [[ -z "$key_id" ]]; then
        echo "Usage: gpgtest key_id passphrase"
        return 1
    fi
    
    echo "$passphrase" | \
        gpg -o /dev/null \
            --local-user "$key_id" \
            -as - \
        && echo "The correct passphrase was entered for this key"
}

# prune - Prune obsolete remote branches on the given remote
function prune() {
    git remote prune "$@"
}

