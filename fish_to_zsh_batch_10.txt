# Additional converted Fish functions (Batch 10)

# dvl - List docker volumes
function dvl() {
    docker volume ls "$@"
}

# qllist - List QuickLook plugins
function qllist() {
    qlmanage -m plugins "$@"
}

# bd - Forcefully delete a branch from git
function bd() {
    git branch -D "$@"
}

# pbjup - Upgrade personal jenkins formula and restart service
function pbjup() {
    brew update
    brew upgrade pbjenkins
    echo "♻️ 👷🏻‍♂️ Restarting jenkins using admin privileges"
    sudo launchctl kickstart -kp system/pbjenkins
}

# ruby_upgrade - Upgrades ruby across major versions
function ruby_upgrade() {
    brew update
    brew info ruby
    brew unlink ruby
    brew cleanup ruby
    brew install ruby
    brew link --overwrite ruby
    
    rm -rf /usr/local/lib/ruby/gems/2.4.0/gems
    rm -rf /usr/local/lib/ruby/gems/2.4.0/extensions
    
    local tmpfile=$(mktemp /tmp/ruby_upgrade.XXXXXX)
    gem --version >/dev/null 2>"$tmpfile"
    
    echo "Looping over gem errors"
    while read -r line; do
        local pristine_cmd=$(echo "$line" | sed 's/.*Try: //')
        if [[ -n "$pristine_cmd" ]]; then
            eval "$pristine_cmd"
        fi
    done < "$tmpfile"
    rm "$tmpfile"
    
    gem update --system
    gem install bundler
}

# format-patch - Git format-patch wrapper
function format-patch() {
    git format-patch "$@"
}

# rl - Quick dir navigation to reflog
function rl() {
    pushd ~/dev/www/reflog/www
}

# pu - Update Pods without updating repos
function pu() {
    pod update --no-repo-update "$@"
}

# clone_or_pull - Clones a fresh copy or pulls an existing git repo
function clone_or_pull() {
    local folder_name="$1"
    local git_url="$2"
    local branch="$3"
    
    if [[ -z "$folder_name" || -z "$git_url" ]]; then
        echo "Usage: clone_or_pull folder url [branch]"
        return 1
    fi
    
    if [[ ! -d "$folder_name" ]]; then
        git clone "$git_url" "$folder_name"
        
        # Checkout branch
        if [[ -n "$branch" ]]; then
            pushd "$folder_name"
            git checkout "$branch"
            popd
        fi
    else
        pushd "$folder_name"
        if [[ -n "$branch" && "$branch" != "$(git rev-parse --abbrev-ref HEAD)" ]]; then
            echo "WARNING: $folder_name currently has the $(git rev-parse --abbrev-ref HEAD) branch checked out (!=$branch)"
        fi
        git pull
        popd
    fi
}

# editorconfig - Generates an editorconfig
function editorconfig() {
    local file_path="$(git rev-parse --show-toplevel 2>/dev/null || pwd)/.editorconfig"
    
    if [[ -f "$file_path" ]]; then
        echo "EditorConfig file already exists at: $file_path"
        return 1
    fi
    
    cat > "$file_path" <<'EOF'
# http://editorconfig.org
root = true

[*]
indent_style = space
indent_size = 4
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.{dart,yaml,yml}]
indent_size = 2

# Use 2 spaces for Ruby files
[{Podfile,Rakefile,*.{rb,podspec}}]
indent_size = 2
indent_style = space
max_line_length = 80

# Use tabs for property lists
[*.plist]
indent_style = tab

# JSON files contain newlines inconsistently
[*.json]
insert_final_newline = ignore

# Makefiles always use tabs for indentation
[Makefile]
indent_style = tab

# Trailing spaces have meaning in Markdown
[*.md]
trim_trailing_whitespace = false
EOF
}

# xcode - Installs and updates Xcode (converted from 🔨_xcode)
function xcode() {
    echo "🔨 Xcode"
    echo
    
    if [[ -z "$XCODE_INSTALL_USER" && -n "$(git config user.email)" ]]; then
        export XCODE_INSTALL_USER="$(git config user.email)"
    fi
    
    # Currently selected version
    xcode-select --print-path
    
    # Update the list of available versions to install
    xcversion update
    
    # Install the CLI tools, if necessary
    if [[ ! -e "/Library/Developer/CommandLineTools/usr/lib/libxcrun.dylib" ]]; then
        xcversion install-cli-tools
    fi
    
    echo "Available:"
    xcversion list
    local installed=$(xcversion list)
    local newest_version=$(echo "$installed" | tail -n 1)
    if [[ ! "$newest_version" == *"(installed)"* ]]; then
        local options=(--no-show-release-notes)
        
        # Don't activate beta versions automatically
        if [[ "$newest_version" == *"beta"* ]]; then
            options+=("--no-switch")
        fi
        
        xcversion install "$newest_version" "${options[@]}"
        
        # Clean out old simulators
        xcrun simctl delete unavailable
    fi
    
    echo
    echo "Installed:"
    xclist
    
    echo
    echo "Themes"
    local xcode_themes_dir=~/Library/Developer/Xcode/UserData/FontAndColorThemes
    local xcode_dev_dir=~/dev/xcode
    local repo_dir="$xcode_dev_dir/xcode-themes"
    mkdir -p "$xcode_themes_dir" "$xcode_dev_dir"
    clone_or_pull "$repo_dir" "git@github.com:hdoria/xcode-themes.git"
    pushd "$repo_dir"
    for theme in *.dvtcolortheme; do
        if [[ ! -e "$xcode_themes_dir/$theme" ]]; then
            # Only copy new themes
            cp -v "$theme" "$xcode_themes_dir"
        fi
    done
    popd
}

# xlog - Quick nav to nginx log dir
function xlog() {
    local subdir="$1"
    pushd "$(brew --prefix)/var/log/nginx/$subdir"
}

# g - Gradle alias
function g() {
    gradle "$@"
}

# fe - Edit a function
function fe() {
    local function_name="$1"
    local file="~/.config/fish/functions/${function_name}.fish"
    
    if [[ ! -e "$file" && ! $(functions "$function_name") ]]; then
        if yn "Function "$function_name" does not exist. Create?"; then
            touch "$file"
        fi
        return
    fi
    
    if [[ -e "$file" ]]; then
        # Edit an autoloaded function
        $EDITOR "$file"
        source "$file"
    else
        # Edit a builtin function, save to autoload
        funced "$function_name"
        funcsave "$function_name"
    fi
    
    if [[ $? -eq 0 ]]; then
        echo "$function_name function reloaded."
    else
        echo "Error reloading $function_name. Please check your syntax in $file"
    fi
}

# ldot - List hidden files
function ldot() {
    ls -ld .* "$@"
}

# checkout - Perform a git checkout
function checkout() {
    git checkout "$@"
}

# arp-fix - Disables unicast ARP cache validation
function arp-fix() {
    if ! user_is_admin; then
        echo "You must be an admin to run this command."
        return 1
    fi
    
    sw_vers -productVersion
    
    local arp_status=$(sysctl net.link.ether.inet.arp_unicast_lim | awk '{print $2}')
    echo "net.link.ether.inet.arp_unicast_lim: $arp_status"
    
    local arp_fixed="net.link.ether.inet.arp_unicast_lim=0"
    
    if [[ $arp_status -ne 0 ]]; then
        sudo sysctl -w $arp_fixed
        arp_status=$(sysctl net.link.ether.inet.arp_unicast_lim | awk '{print $2}')
        
        if [[ $arp_status -eq 0 ]]; then
            echo "Fixed ARP issue"
        else
            echo "Something went wrong"
            echo "net.link.ether.inet.arp_unicast_lim: $arp_status"
            return 1
        fi
    else
        echo "Runtime ARP status is correct"
    fi
    
    local sysctl_file="/etc/sysctl.conf"
    if [[ ! -e "$sysctl_file" ]]; then
        echo "$arp_fixed" | sudo tee "$sysctl_file"
        echo "ARP fix added to $sysctl_file"
    elif ! grep -q "$arp_fixed" "$sysctl_file"; then
        echo "$arp_fixed" | sudo tee -a "$sysctl_file"
        echo "ARP fix added to $sysctl_file"
    else
        echo "$sysctl_file already contains the ARP fix."
    fi
}

# powerlinetest - Print special Powerline characters to test current font's support
function powerlinetest() {
    echo "⮀ ± ⭠ ➦ ✔ ✘ ⚡"
}

# theirs - Checkout theirs for unmerged paths
function theirs() {
    git checkout --theirs "$@" && git add "$@"
}

# pl_edit - Edit Powerline config files
function pl_edit() {
    echo "Kill the powerline-daemon (-k) to see changes."
    psgrep powerline-daemon
    $EDITOR ~/.config/powerline
}
