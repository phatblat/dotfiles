{
  "numStartups": 23,
  "installMethod": "local",
  "autoUpdates": false,
  "theme": "light-ansi",
  "tipsHistory": {
    "new-user-warmup": 1,
    "memory-command": 4,
    "shift-enter": 5,
    "theme-command": 6,
    "prompt-queue": 8,
    "enter-to-steer-in-relatime": 8,
    "todo-list": 12,
    "ide-upsell-external-terminal": 13,
    "# for memory": 15,
    "install-github-app": 16,
    "permissions": 23,
    "drag-and-drop-images": 23
  },
  "autoConnectIde": true,
  "userID": "9519446010513ae23b09aca409fc9fb424c729c1aa03a92f059f5bedf66aa456",
  "firstStartTime": "2025-07-26T23:33:24.900Z",
  "projects": {
    "/Users/phatblat/dev/ldg/wave-rider": {
      "allowedTools": [],
      "history": [
        {
          "display": "start trading",
          "pastedContents": {}
        },
        {
          "display": "it looked like the data pipeline stopped soon after start",
          "pastedContents": {}
        },
        {
          "display": "start trading",
          "pastedContents": {}
        },
        {
          "display": "add just recipes for these 4 new commands",
          "pastedContents": {}
        },
        {
          "display": "run just check and fix the errors",
          "pastedContents": {}
        },
        {
          "display": "how do I monitor trading performance",
          "pastedContents": {}
        },
        {
          "display": "test the alpaca credentials",
          "pastedContents": {}
        },
        {
          "display": "yes how do I set up api credentials?",
          "pastedContents": {}
        },
        {
          "display": "how can we start trading in paper mode?",
          "pastedContents": {}
        },
        {
          "display": "run python commands through uv",
          "pastedContents": {}
        },
        {
          "display": "let's review paper trading mode. my understanding is this has already been built into the data pipeline. is there a way to see the data once ingested?",
          "pastedContents": {}
        },
        {
          "display": "now, back to the plan: what's the next step?",
          "pastedContents": {}
        },
        {
          "display": "in the future after each change you make to the project files, run this command: just build test lint format",
          "pastedContents": {}
        },
        {
          "display": "upgrade bazel to 8.3.1",
          "pastedContents": {}
        },
        {
          "display": "run just lint and fix the errors",
          "pastedContents": {}
        },
        {
          "display": "run 'just test' and fix the failing test",
          "pastedContents": {}
        },
        {
          "display": "test the end to end data flow",
          "pastedContents": {}
        },
        {
          "display": "what's the next item to do on the @docs/plan.md ?",
          "pastedContents": {}
        },
        {
          "display": "update the claude.md file with this information, if necessary",
          "pastedContents": {}
        },
        {
          "display": "read the files in @docs/ ",
          "pastedContents": {}
        },
        {
          "display": "/init ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": true,
      "projectOnboardingSeenCount": 3,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "historical_manager.py",
        "pipeline.py",
        "ema_cloud_visualizer.py",
        "performance.py",
        "oms.py"
      ],
      "exampleFilesGeneratedAt": 1753573934080,
      "hasCompletedProjectOnboarding": true,
      "lastCost": 33.24598409999999,
      "lastAPIDuration": 2453898,
      "lastDuration": 10744320,
      "lastLinesAdded": 4670,
      "lastLinesRemoved": 97,
      "lastTotalInputTokens": 66769,
      "lastTotalOutputTokens": 101494,
      "lastTotalCacheCreationInputTokens": 1179596,
      "lastTotalCacheReadInputTokens": 22670615,
      "lastTotalWebSearchRequests": 1,
      "lastSessionId": "0dffe4fa-3b56-49a1-9cf6-6286f2268cf5"
    },
    "/Users/phatblat": {
      "allowedTools": [],
      "history": [
        {
          "display": "move the bash claude function into .profile and remove the check for direct execution",
          "pastedContents": {}
        },
        {
          "display": "port this claude function to nu, bash and bourne shell. make sure to strip trailing spaces off lines touched and end each file with a single newline",
          "pastedContents": {}
        },
        {
          "display": "create a fish shell function named claude that invokes .claude/local/claude when present. When not present, install using this commaind, then execute: mise exec npm:@anthropic-ai/claude-code -- claude migrate-installer",
          "pastedContents": {}
        },
        {
          "display": "convert the rest of my fish shell functions related to git into nu shell functions",
          "pastedContents": {}
        },
        {
          "display": "remove the trailing whitespace from config.nu",
          "pastedContents": {}
        },
        {
          "display": "port the other git functions from fish to nu, including ba, branch, bra",
          "pastedContents": {}
        },
        {
          "display": "commit the change to starship.toml",
          "pastedContents": {}
        },
        {
          "display": "commit the changes to config.nu",
          "pastedContents": {}
        },
        {
          "display": "loading a new nu shell gives an error with the pushf function   × The `push` command doesn't have flag `force`.\n     ╭─[/Users/phatblat/.config/nushell/config.nu:823:10]\n 822 │ def pushf [...args] {\n 823 │     push --force ...$args\n     ·          ───┬───\n     ·             ╰── unknown flag\n 824 │ }\n     ╰────",
          "pastedContents": {}
        },
        {
          "display": "port the following fish shell functions to nu shell: push, pushf, pull, fetch, track, ba, rv, bd",
          "pastedContents": {}
        },
        {
          "display": "commit this change to the justfile following conventional commit style for the git message",
          "pastedContents": {}
        },
        {
          "display": "add deletion of *.hprof files from my home dir to the clean recipe",
          "pastedContents": {}
        },
        {
          "display": "port the lg function from fish to nushell",
          "pastedContents": {}
        },
        {
          "display": "the sqlite file at path \"Library/Application Support/default.store\" was created again",
          "pastedContents": {}
        },
        {
          "display": "I don't use icloud mail. what service creates this file and how do I stop and disable it?",
          "pastedContents": {}
        },
        {
          "display": "/model ",
          "pastedContents": {}
        },
        {
          "display": "a sqlite file at path \"Library/Application Support/default.store\" is created regularly and I want to identify what keeps creating this file. Inspect the file and see what sort of data is being stored in the file",
          "pastedContents": {}
        },
        {
          "display": "add ls alias to list recipe in @justfile ",
          "pastedContents": {}
        },
        {
          "display": "now I'm getting an error from direnv\ndirenv: error unknown target shell 'nu'",
          "pastedContents": {}
        },
        {
          "display": "I'm still seeing errors. please test loading nu after attempting to fix these errors\n[Pasted text #1 +21 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "direnv: error unknown target shell 'nu'\nError: nu::parser::error\n\n  × Error: nu::shell::not_a_constant\n  │ \n  │   × Not a constant.\n  │      ╭─[/Users/phatblat/.config/nushell/config.nu:804:12]\n  │  803 │ if ($direnv_cache | path exists) {\n  │  804 │     source $direnv_cache\n  │      ·            ──────┬──────\n  │      ·                  ╰── Value is not a parse-time constant\n  │  805 │ }\n  │      ╰────\n  │   help: Only a subset of expressions are allowed constants during parsing. Try using the 'const' command or typing the value literally.\n  │ \n     ╭─[/Users/phatblat/.config/nushell/config.nu:804:12]\n 803 │ if ($direnv_cache | path exists) {\n 804 │     source $direnv_cache\n     ·            ──────┬──────\n     ·                  ╰── Encountered error during parse-time evaluation\n 805 │ }\n     ╰────"
            }
          }
        },
        {
          "display": "why did you place configuration files under the .cache directory? is that the standard location for nushell configuration files?",
          "pastedContents": {}
        },
        {
          "display": "there is an error loading the nu shell config \n[Pasted text #1 +21 lines]",
          "pastedContents": {
            "1": {
              "id": 1,
              "type": "text",
              "content": "direnv: error unknown target shell 'nu'\nError: nu::parser::error\n\n  × Error: nu::shell::not_a_constant\n  │ \n  │   × Not a constant.\n  │      ╭─[/Users/phatblat/.config/nushell/config.nu:787:12]\n  │  786 │ if ($zoxide_cache | path exists) {\n  │  787 │     source $zoxide_cache\n  │      ·            ──────┬──────\n  │      ·                  ╰── Value is not a parse-time constant\n  │  788 │ }\n  │      ╰────\n  │   help: Only a subset of expressions are allowed constants during parsing. Try using the 'const' command or typing the value literally.\n  │ \n     ╭─[/Users/phatblat/.config/nushell/config.nu:787:12]\n 786 │ if ($zoxide_cache | path exists) {\n 787 │     source $zoxide_cache\n     ·            ──────┬──────\n     ·                  ╰── Encountered error during parse-time evaluation\n 788 │ }\n     ╰────"
            }
          }
        },
        {
          "display": "/config ",
          "pastedContents": {}
        },
        {
          "display": "configure nushell to load mise and zoxide",
          "pastedContents": {}
        },
        {
          "display": "update the @CLAUDE.md  file",
          "pastedContents": {}
        },
        {
          "display": "/init ",
          "pastedContents": {}
        },
        {
          "display": "pwd!",
          "pastedContents": {}
        },
        {
          "display": "remove the l alias",
          "pastedContents": {}
        },
        {
          "display": "This is my HOME folder on macos. I've been using primarily fish shell but am experimenting with nushell. I have many functions in @.config/fish/functions. convert all the single-character named fish functions to nushell functions",
          "pastedContents": {}
        },
        {
          "display": "/terminal-setup ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": false,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "app.js",
        "user.js",
        "index.js",
        "server.js",
        "routes.js"
      ],
      "exampleFilesGeneratedAt": 1755964190912,
      "hasCompletedProjectOnboarding": true,
      "lastTotalWebSearchRequests": 0
    },
    "/Users/phatblat/dev/ditto/image-bakery": {
      "allowedTools": [],
      "history": [
        {
          "display": "can packer configure a remote windows machine that is not a vm?",
          "pastedContents": {}
        },
        {
          "display": "analyze @vms/windows/ give me an overview of how the windows image is built. Create a file containing a list all tools and versions in markdown format listing tools alphabetically by name followed by the semver. Also create a file containing all windows settings applied and configuration files created or modified by the process",
          "pastedContents": {}
        },
        {
          "display": "/config ",
          "pastedContents": {}
        },
        {
          "display": "/init ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": true,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "cloud-infra-runner.Dockerfile",
        "base-images.yaml",
        "hydra-build-glibc.Dockerfile",
        "vm-images.yaml",
        "ditto-sdk-runner.Dockerfile"
      ],
      "exampleFilesGeneratedAt": 1754151264027,
      "hasCompletedProjectOnboarding": true,
      "lastCost": 3.5839572999999993,
      "lastAPIDuration": 398360,
      "lastDuration": 105128597,
      "lastLinesAdded": 415,
      "lastLinesRemoved": 0,
      "lastTotalInputTokens": 916,
      "lastTotalOutputTokens": 16161,
      "lastTotalCacheCreationInputTokens": 241662,
      "lastTotalCacheReadInputTokens": 1309976,
      "lastTotalWebSearchRequests": 0,
      "lastSessionId": "58e92cdc-e360-40d5-9276-caa8b9eadeb6"
    },
    "/Users/phatblat/dev/ditto/build-infra": {
      "allowedTools": [],
      "history": [
        {
          "display": "remove the phx-mac01 host",
          "pastedContents": {}
        },
        {
          "display": "remove the rpi4 hosts from inventory and the rpi playbook. make sure to remove any references to them in the justfile",
          "pastedContents": {}
        },
        {
          "display": "/init ",
          "pastedContents": {}
        },
        {
          "display": "/config ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": true,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "roles/users/tasks/main.yml",
        "roles/buildkite/tasks/main.yml",
        "roles/rust/tasks/main.yml",
        "README.md",
        "roles/users/templates/home/ci/bash_profile.jinja"
      ],
      "exampleFilesGeneratedAt": 1754152407675,
      "lastTotalWebSearchRequests": 0,
      "hasCompletedProjectOnboarding": true,
      "lastCost": 1.5461026,
      "lastAPIDuration": 74074,
      "lastDuration": 140127,
      "lastLinesAdded": 0,
      "lastLinesRemoved": 20,
      "lastTotalInputTokens": 1121,
      "lastTotalOutputTokens": 2625,
      "lastTotalCacheCreationInputTokens": 30366,
      "lastTotalCacheReadInputTokens": 521215,
      "lastSessionId": "527be7b2-f833-4942-a217-031b0bda1616"
    },
    "/Users/phatblat/dev/ldg/L8r": {
      "allowedTools": [],
      "history": [
        {
          "display": "add a run-desktop recipe",
          "pastedContents": {}
        },
        {
          "display": "add a run-android receipe to launch the android app on a device or emulator",
          "pastedContents": {}
        },
        {
          "display": "the android target is failing to build\n   > Android resource linking failed\n     ERROR: /Users/phatblat/dev/ldg/L8r/kotlin/androidApp/src/androidMain/AndroidManifest.xml:4:5-20:19: AAPT: error: resource mipmap/ic_launcher (aka co.log_g.l8r.android:mipmap/ic_launcher) not found.",
          "pastedContents": {}
        },
        {
          "display": "make the android-setup recipe skip work and logging if the local.properties file is already present",
          "pastedContents": {}
        },
        {
          "display": "create a justfile recipe which creates a local.properties file in the kotlin directory with an sdk.dir property set to the value of $ANDROID_HOME",
          "pastedContents": {}
        },
        {
          "display": "the files in the kotlin folder are being ignored by git",
          "pastedContents": {}
        },
        {
          "display": "create a top-level directory 'named' kotlin. inside that folder create a kotlin multiplatform project using compose mutiplatform supporting target platforms: android, ios and jvm. review the swiftui in the swift subdirectory and implement similar UI using compose multiplatform. use ditto \n5.0.0-preview.2 documented here https://docs.ditto.live/sdk/v5/release-notes/kotlin",
          "pastedContents": {}
        },
        {
          "display": "add a recipe to the justfile to list available simulators",
          "pastedContents": {}
        },
        {
          "display": "add just to mise and migrate the makefile to a justfile",
          "pastedContents": {}
        },
        {
          "display": "commit these change to git using conventional commits style message",
          "pastedContents": {}
        },
        {
          "display": "replace the brewfile and lock with a mise configuration for the same tools",
          "pastedContents": {}
        },
        {
          "display": "/init ",
          "pastedContents": {}
        },
        {
          "display": "create a justfile recipe called usage-board with alias ub that calls ccusage blocks --live",
          "pastedContents": {}
        },
        {
          "display": "create a justfile recipe called usage-board",
          "pastedContents": {}
        },
        {
          "display": "change the apple folder name to swift and update makefile and xcode projects. run make all to ensure everything still builds afterwards",
          "pastedContents": {}
        },
        {
          "display": "create an 'apple' directory and move all the current subdirectories into this apple folder, including the .xcodeproj and .xcworkspace  project folders. Update the makefile with these new paths, and refrences to the page_list.json file in the xcode projects",
          "pastedContents": {}
        },
        {
          "display": "/init ",
          "pastedContents": {}
        }
      ],
      "mcpContextUris": [],
      "mcpServers": {},
      "enabledMcpjsonServers": [],
      "disabledMcpjsonServers": [],
      "hasTrustDialogAccepted": true,
      "projectOnboardingSeenCount": 1,
      "hasClaudeMdExternalIncludesApproved": false,
      "hasClaudeMdExternalIncludesWarningShown": false,
      "exampleFiles": [
        "ContentView.swift",
        "App.swift",
        "Page.swift",
        "ShareViewController.swift",
        "LifecycleManager.swift"
      ],
      "exampleFilesGeneratedAt": 1754256623740,
      "hasCompletedProjectOnboarding": true,
      "lastTotalWebSearchRequests": 0,
      "lastCost": 22.95301584999999,
      "lastAPIDuration": 1420177,
      "lastDuration": 189731533,
      "lastLinesAdded": 2233,
      "lastLinesRemoved": 244,
      "lastTotalInputTokens": 88786,
      "lastTotalOutputTokens": 64009,
      "lastTotalCacheCreationInputTokens": 1279323,
      "lastTotalCacheReadInputTokens": 16824588,
      "lastSessionId": "272a385c-6295-4179-8d6b-c267f98fd7dc"
    }
  },
  "oauthAccount": {
    "accountUuid": "193b5ba3-3754-4e2a-953b-4adcc4457018",
    "emailAddress": "ben@octop.ad",
    "organizationUuid": "3e25f271-75dd-4066-8506-a8200882f46e",
    "organizationRole": "admin",
    "workspaceRole": null,
    "organizationName": "ben@octop.ad's Organization"
  },
  "isQualifiedForDataSharing": false,
  "hasCompletedOnboarding": true,
  "lastOnboardingVersion": "1.0.61",
  "subscriptionNoticeCount": 0,
  "hasAvailableSubscription": false,
  "cachedChangelog": "# Changelog\n\n## 1.0.88\n\n- Fixed issue causing \"OAuth authentication is currently not supported\"\n- Status line input now includes `exceeds_200k_tokens`\n- Fixed incorrect usage tracking in /cost.\n- Introduced `ANTHROPIC_DEFAULT_SONNET_MODEL` and `ANTHROPIC_DEFAULT_OPUS_MODEL` for controlling model aliases opusplan, opus, and sonnet.\n- Bedrock: Updated default Sonnet model to Sonnet 4\n\n## 1.0.86\n\n- Added /context to help users self-serve debug context issues\n- SDK: Added UUID support for all SDK messages\n- SDK: Added `--replay-user-messages` to replay user messages back to stdout\n\n## 1.0.85\n\n- Status line input now includes session cost info\n- Hooks: Introduced SessionEnd hook\n\n## 1.0.84\n\n- Fix tool_use/tool_result id mismatch error when network is unstable\n- Fix Claude sometimes ignoring real-time steering when wrapping up a task\n- @-mention: Add ~/.claude/\\* files to suggestions for easier agent, output style, and slash command editing\n- Use built-in ripgrep by default; to opt out of this behavior, set USE_BUILTIN_RIPGREP=0\n\n## 1.0.83\n\n- @-mention: Support files with spaces in path\n- New shimmering spinner\n\n## 1.0.82\n\n- SDK: Add request cancellation support\n- SDK: New additionalDirectories option to search custom paths, improved slash command processing\n- Settings: Validation prevents invalid fields in .claude/settings.json files\n- MCP: Improve tool name consistency\n- Bash: Fix crash when Claude tries to automatically read large files\n\n## 1.0.81\n\n- Released output styles, including new built-in educational output styles \"Explanatory\" and \"Learning\". Docs: https://docs.anthropic.com/en/docs/claude-code/output-styles\n- Agents: Fix custom agent loading when agent files are unparsable\n\n## 1.0.80\n\n- UI improvements: Fix text contrast for custom subagent colors and spinner rendering issues\n\n## 1.0.77\n\n- Bash tool: Fix heredoc and multiline string escaping, improve stderr redirection handling\n- SDK: Add session support and permission denial tracking\n- Fix token limit errors in conversation summarization\n- Opus Plan Mode: New setting in `/model` to run Opus only in plan mode, Sonnet otherwise\n\n## 1.0.73\n\n- MCP: Support multiple config files with `--mcp-config file1.json file2.json`\n- MCP: Press Esc to cancel OAuth authentication flows\n- Bash: Improved command validation and reduced false security warnings\n- UI: Enhanced spinner animations and status line visual hierarchy\n- Linux: Added support for Alpine and musl-based distributions (requires separate ripgrep installation)\n\n## 1.0.72\n\n- Ask permissions: have Claude Code always ask for confirmation to use specific tools with /permissions\n\n## 1.0.71\n\n- Background commands: (Ctrl-b) to run any Bash command in the background so Claude can keep working (great for dev servers, tailing logs, etc.)\n- Customizable status line: add your terminal prompt to Claude Code with /statusline\n\n## 1.0.70\n\n- Performance: Optimized message rendering for better performance with large contexts\n- Windows: Fixed native file search, ripgrep, and subagent functionality\n- Added support for @-mentions in slash command arguments\n\n## 1.0.69\n\n- Upgraded Opus to version 4.1\n\n## 1.0.68\n\n- Fix incorrect model names being used for certain commands like `/pr-comments`\n- Windows: improve permissions checks for allow / deny tools and project trust. This may create a new project entry in `.claude.json` - manually merge the history field if desired.\n- Windows: improve sub-process spawning to eliminate \"No such file or directory\" when running commands like pnpm\n- Enhanced /doctor command with CLAUDE.md and MCP tool context for self-serve debugging\n- SDK: Added canUseTool callback support for tool confirmation\n- Added `disableAllHooks` setting\n- Improved file suggestions performance in large repos\n\n## 1.0.65\n\n- IDE: Fixed connection stability issues and error handling for diagnostics\n- Windows: Fixed shell environment setup for users without .bashrc files\n\n## 1.0.64\n\n- Agents: Added model customization support - you can now specify which model an agent should use\n- Agents: Fixed unintended access to the recursive agent tool\n- Hooks: Added systemMessage field to hook JSON output for displaying warnings and context\n- SDK: Fixed user input tracking across multi-turn conversations\n- Added hidden files to file search and @-mention suggestions\n\n## 1.0.63\n\n- Windows: Fixed file search, @agent mentions, and custom slash commands functionality\n\n## 1.0.62\n\n- Added @-mention support with typeahead for custom agents. @<your-custom-agent> to invoke it\n- Hooks: Added SessionStart hook for new session initialization\n- /add-dir command now supports typeahead for directory paths\n- Improved network connectivity check reliability\n\n## 1.0.61\n\n- Transcript mode (Ctrl+R): Changed Esc to exit transcript mode rather than interrupt\n- Settings: Added `--settings` flag to load settings from a JSON file\n- Settings: Fixed resolution of settings files paths that are symlinks\n- OTEL: Fixed reporting of wrong organization after authentication changes\n- Slash commands: Fixed permissions checking for allowed-tools with Bash\n- IDE: Added support for pasting images in VSCode MacOS using ⌘+V\n- IDE: Added `CLAUDE_CODE_AUTO_CONNECT_IDE=false` for disabling IDE auto-connection\n- Added `CLAUDE_CODE_SHELL_PREFIX` for wrapping Claude and user-provided shell commands run by Claude Code\n\n## 1.0.60\n\n- You can now create custom subagents for specialized tasks! Run /agents to get started\n\n## 1.0.59\n\n- SDK: Added tool confirmation support with canUseTool callback\n- SDK: Allow specifying env for spawned process\n- Hooks: Exposed PermissionDecision to hooks (including \"ask\")\n- Hooks: UserPromptSubmit now supports additionalContext in advanced JSON output\n- Fixed issue where some Max users that specified Opus would still see fallback to Sonnet\n\n## 1.0.58\n\n- Added support for reading PDFs\n- MCP: Improved server health status display in 'claude mcp list'\n- Hooks: Added CLAUDE_PROJECT_DIR env var for hook commands\n\n## 1.0.57\n\n- Added support for specifying a model in slash commands\n- Improved permission messages to help Claude understand allowed tools\n- Fix: Remove trailing newlines from bash output in terminal wrapping\n\n## 1.0.56\n\n- Windows: Enabled shift+tab for mode switching on versions of Node.js that support terminal VT mode\n- Fixes for WSL IDE detection\n- Fix an issue causing awsRefreshHelper changes to .aws directory not to be picked up\n\n## 1.0.55\n\n- Clarified knowledge cutoff for Opus 4 and Sonnet 4 models\n- Windows: fixed Ctrl+Z crash\n- SDK: Added ability to capture error logging\n- Add --system-prompt-file option to override system prompt in print mode\n\n## 1.0.54\n\n- Hooks: Added UserPromptSubmit hook and the current working directory to hook inputs\n- Custom slash commands: Added argument-hint to frontmatter\n- Windows: OAuth uses port 45454 and properly constructs browser URL\n- Windows: mode switching now uses alt + m, and plan mode renders properly\n- Shell: Switch to in-memory shell snapshot to fix file-related errors\n\n## 1.0.53\n\n- Updated @-mention file truncation from 100 lines to 2000 lines\n- Add helper script settings for AWS token refresh: awsAuthRefresh (for foreground operations like aws sso login) and awsCredentialExport (for background operation with STS-like response).\n\n## 1.0.52\n\n- Added support for MCP server instructions\n\n## 1.0.51\n\n- Added support for native Windows (requires Git for Windows)\n- Added support for Bedrock API keys through environment variable AWS_BEARER_TOKEN_BEDROCK\n- Settings: /doctor can now help you identify and fix invalid setting files\n- `--append-system-prompt` can now be used in interactive mode, not just --print/-p.\n- Increased auto-compact warning threshold from 60% to 80%\n- Fixed an issue with handling user directories with spaces for shell snapshots\n- OTEL resource now includes os.type, os.version, host.arch, and wsl.version (if running on Windows Subsystem for Linux)\n- Custom slash commands: Fixed user-level commands in subdirectories\n- Plan mode: Fixed issue where rejected plan from sub-task would get discarded\n\n## 1.0.48\n\n- Fixed a bug in v1.0.45 where the app would sometimes freeze on launch\n- Added progress messages to Bash tool based on the last 5 lines of command output\n- Added expanding variables support for MCP server configuration\n- Moved shell snapshots from /tmp to ~/.claude for more reliable Bash tool calls\n- Improved IDE extension path handling when Claude Code runs in WSL\n- Hooks: Added a PreCompact hook\n- Vim mode: Added c, f/F, t/T\n\n## 1.0.45\n\n- Redesigned Search (Grep) tool with new tool input parameters and features\n- Disabled IDE diffs for notebook files, fixing \"Timeout waiting after 1000ms\" error\n- Fixed config file corruption issue by enforcing atomic writes\n- Updated prompt input undo to Ctrl+\\_ to avoid breaking existing Ctrl+U behavior, matching zsh's undo shortcut\n- Stop Hooks: Fixed transcript path after /clear and fixed triggering when loop ends with tool call\n- Custom slash commands: Restored namespacing in command names based on subdirectories. For example, .claude/commands/frontend/component.md is now /frontend:component, not /component.\n\n## 1.0.44\n\n- New /export command lets you quickly export a conversation for sharing\n- MCP: resource_link tool results are now supported\n- MCP: tool annotations and tool titles now display in /mcp view\n- Changed Ctrl+Z to suspend Claude Code. Resume by running `fg`. Prompt input undo is now Ctrl+U.\n\n## 1.0.43\n\n- Fixed a bug where the theme selector was saving excessively\n- Hooks: Added EPIPE system error handling\n\n## 1.0.42\n\n- Added tilde (`~`) expansion support to `/add-dir` command\n\n## 1.0.41\n\n- Hooks: Split Stop hook triggering into Stop and SubagentStop\n- Hooks: Enabled optional timeout configuration for each command\n- Hooks: Added \"hook_event_name\" to hook input\n- Fixed a bug where MCP tools would display twice in tool list\n- New tool parameters JSON for Bash tool in `tool_decision` event\n\n## 1.0.40\n\n- Fixed a bug causing API connection errors with UNABLE_TO_GET_ISSUER_CERT_LOCALLY if `NODE_EXTRA_CA_CERTS` was set\n\n## 1.0.39\n\n- New Active Time metric in OpenTelemetry logging\n\n## 1.0.38\n\n- Released hooks. Special thanks to community input in https://github.com/anthropics/claude-code/issues/712. Docs: https://docs.anthropic.com/en/docs/claude-code/hooks\n\n## 1.0.37\n\n- Remove ability to set `Proxy-Authorization` header via ANTHROPIC_AUTH_TOKEN or apiKeyHelper\n\n## 1.0.36\n\n- Web search now takes today's date into context\n- Fixed a bug where stdio MCP servers were not terminating properly on exit\n\n## 1.0.35\n\n- Added support for MCP OAuth Authorization Server discovery\n\n## 1.0.34\n\n- Fixed a memory leak causing a MaxListenersExceededWarning message to appear\n\n## 1.0.33\n\n- Improved logging functionality with session ID support\n- Added prompt input undo functionality (Ctrl+Z and vim 'u' command)\n- Improvements to plan mode\n\n## 1.0.32\n\n- Updated loopback config for litellm\n- Added forceLoginMethod setting to bypass login selection screen\n\n## 1.0.31\n\n- Fixed a bug where ~/.claude.json would get reset when file contained invalid JSON\n\n## 1.0.30\n\n- Custom slash commands: Run bash output, @-mention files, enable thinking with thinking keywords\n- Improved file path autocomplete with filename matching\n- Added timestamps in Ctrl-r mode and fixed Ctrl-c handling\n- Enhanced jq regex support for complex filters with pipes and select\n\n## 1.0.29\n\n- Improved CJK character support in cursor navigation and rendering\n\n## 1.0.28\n\n- Slash commands: Fix selector display during history navigation\n- Resizes images before upload to prevent API size limit errors\n- Added XDG_CONFIG_HOME support to configuration directory\n- Performance optimizations for memory usage\n- New attributes (terminal.type, language) in OpenTelemetry logging\n\n## 1.0.27\n\n- Streamable HTTP MCP servers are now supported\n- Remote MCP servers (SSE and HTTP) now support OAuth\n- MCP resources can now be @-mentioned\n- /resume slash command to switch conversations within Claude Code\n\n## 1.0.25\n\n- Slash commands: moved \"project\" and \"user\" prefixes to descriptions\n- Slash commands: improved reliability for command discovery\n- Improved support for Ghostty\n- Improved web search reliability\n\n## 1.0.24\n\n- Improved /mcp output\n- Fixed a bug where settings arrays got overwritten instead of merged\n\n## 1.0.23\n\n- Released TypeScript SDK: import @anthropic-ai/claude-code to get started\n- Released Python SDK: pip install claude-code-sdk to get started\n\n## 1.0.22\n\n- SDK: Renamed `total_cost` to `total_cost_usd`\n\n## 1.0.21\n\n- Improved editing of files with tab-based indentation\n- Fix for tool_use without matching tool_result errors\n- Fixed a bug where stdio MCP server processes would linger after quitting Claude Code\n\n## 1.0.18\n\n- Added --add-dir CLI argument for specifying additional working directories\n- Added streaming input support without require -p flag\n- Improved startup performance and session storage performance\n- Added CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR environment variable to freeze working directory for bash commands\n- Added detailed MCP server tools display (/mcp)\n- MCP authentication and permission improvements\n- Added auto-reconnection for MCP SSE connections on disconnect\n- Fixed issue where pasted content was lost when dialogs appeared\n\n## 1.0.17\n\n- We now emit messages from sub-tasks in -p mode (look for the parent_tool_use_id property)\n- Fixed crashes when the VS Code diff tool is invoked multiple times quickly\n- MCP server list UI improvements\n- Update Claude Code process title to display \"claude\" instead of \"node\"\n\n## 1.0.11\n\n- Claude Code can now also be used with a Claude Pro subscription\n- Added /upgrade for smoother switching to Claude Max plans\n- Improved UI for authentication from API keys and Bedrock/Vertex/external auth tokens\n- Improved shell configuration error handling\n- Improved todo list handling during compaction\n\n## 1.0.10\n\n- Added markdown table support\n- Improved streaming performance\n\n## 1.0.8\n\n- Fixed Vertex AI region fallback when using CLOUD_ML_REGION\n- Increased default otel interval from 1s -> 5s\n- Fixed edge cases where MCP_TIMEOUT and MCP_TOOL_TIMEOUT weren't being respected\n- Fixed a regression where search tools unnecessarily asked for permissions\n- Added support for triggering thinking non-English languages\n- Improved compacting UI\n\n## 1.0.7\n\n- Renamed /allowed-tools -> /permissions\n- Migrated allowedTools and ignorePatterns from .claude.json -> settings.json\n- Deprecated claude config commands in favor of editing settings.json\n- Fixed a bug where --dangerously-skip-permissions sometimes didn't work in --print mode\n- Improved error handling for /install-github-app\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.6\n\n- Improved edit reliability for tab-indented files\n- Respect CLAUDE_CONFIG_DIR everywhere\n- Reduced unnecessary tool permission prompts\n- Added support for symlinks in @file typeahead\n- Bugfixes, UI polish, and tool reliability improvements\n\n## 1.0.4\n\n- Fixed a bug where MCP tool errors weren't being parsed correctly\n\n## 1.0.1\n\n- Added `DISABLE_INTERLEAVED_THINKING` to give users the option to opt out of interleaved thinking.\n- Improved model references to show provider-specific names (Sonnet 3.7 for Bedrock, Sonnet 4 for Console)\n- Updated documentation links and OAuth process descriptions\n\n## 1.0.0\n\n- Claude Code is now generally available\n- Introducing Sonnet 4 and Opus 4 models\n\n## 0.2.125\n\n- Breaking change: Bedrock ARN passed to `ANTHROPIC_MODEL` or `ANTHROPIC_SMALL_FAST_MODEL` should no longer contain an escaped slash (specify `/` instead of `%2F`)\n- Removed `DEBUG=true` in favor of `ANTHROPIC_LOG=debug`, to log all requests\n\n## 0.2.117\n\n- Breaking change: --print JSON output now returns nested message objects, for forwards-compatibility as we introduce new metadata fields\n- Introduced settings.cleanupPeriodDays\n- Introduced CLAUDE_CODE_API_KEY_HELPER_TTL_MS env var\n- Introduced --debug mode\n\n## 0.2.108\n\n- You can now send messages to Claude while it works to steer Claude in real-time\n- Introduced BASH_DEFAULT_TIMEOUT_MS and BASH_MAX_TIMEOUT_MS env vars\n- Fixed a bug where thinking was not working in -p mode\n- Fixed a regression in /cost reporting\n- Deprecated MCP wizard interface in favor of other MCP commands\n- Lots of other bugfixes and improvements\n\n## 0.2.107\n\n- CLAUDE.md files can now import other files. Add @path/to/file.md to ./CLAUDE.md to load additional files on launch\n\n## 0.2.106\n\n- MCP SSE server configs can now specify custom headers\n- Fixed a bug where MCP permission prompt didn't always show correctly\n\n## 0.2.105\n\n- Claude can now search the web\n- Moved system & account status to /status\n- Added word movement keybindings for Vim\n- Improved latency for startup, todo tool, and file edits\n\n## 0.2.102\n\n- Improved thinking triggering reliability\n- Improved @mention reliability for images and folders\n- You can now paste multiple large chunks into one prompt\n\n## 0.2.100\n\n- Fixed a crash caused by a stack overflow error\n- Made db storage optional; missing db support disables --continue and --resume\n\n## 0.2.98\n\n- Fixed an issue where auto-compact was running twice\n\n## 0.2.96\n\n- Claude Code can now also be used with a Claude Max subscription (https://claude.ai/upgrade)\n\n## 0.2.93\n\n- Resume conversations from where you left off from with \"claude --continue\" and \"claude --resume\"\n- Claude now has access to a Todo list that helps it stay on track and be more organized\n\n## 0.2.82\n\n- Added support for --disallowedTools\n- Renamed tools for consistency: LSTool -> LS, View -> Read, etc.\n\n## 0.2.75\n\n- Hit Enter to queue up additional messages while Claude is working\n- Drag in or copy/paste image files directly into the prompt\n- @-mention files to directly add them to context\n- Run one-off MCP servers with `claude --mcp-config <path-to-file>`\n- Improved performance for filename auto-complete\n\n## 0.2.74\n\n- Added support for refreshing dynamically generated API keys (via apiKeyHelper), with a 5 minute TTL\n- Task tool can now perform writes and run bash commands\n\n## 0.2.72\n\n- Updated spinner to indicate tokens loaded and tool usage\n\n## 0.2.70\n\n- Network commands like curl are now available for Claude to use\n- Claude can now run multiple web queries in parallel\n- Pressing ESC once immediately interrupts Claude in Auto-accept mode\n\n## 0.2.69\n\n- Fixed UI glitches with improved Select component behavior\n- Enhanced terminal output display with better text truncation logic\n\n## 0.2.67\n\n- Shared project permission rules can be saved in .claude/settings.json\n\n## 0.2.66\n\n- Print mode (-p) now supports streaming output via --output-format=stream-json\n- Fixed issue where pasting could trigger memory or bash mode unexpectedly\n\n## 0.2.63\n\n- Fixed an issue where MCP tools were loaded twice, which caused tool call errors\n\n## 0.2.61\n\n- Navigate menus with vim-style keys (j/k) or bash/emacs shortcuts (Ctrl+n/p) for faster interaction\n- Enhanced image detection for more reliable clipboard paste functionality\n- Fixed an issue where ESC key could crash the conversation history selector\n\n## 0.2.59\n\n- Copy+paste images directly into your prompt\n- Improved progress indicators for bash and fetch tools\n- Bugfixes for non-interactive mode (-p)\n\n## 0.2.54\n\n- Quickly add to Memory by starting your message with '#'\n- Press ctrl+r to see full output for long tool results\n- Added support for MCP SSE transport\n\n## 0.2.53\n\n- New web fetch tool lets Claude view URLs that you paste in\n- Fixed a bug with JPEG detection\n\n## 0.2.50\n\n- New MCP \"project\" scope now allows you to add MCP servers to .mcp.json files and commit them to your repository\n\n## 0.2.49\n\n- Previous MCP server scopes have been renamed: previous \"project\" scope is now \"local\" and \"global\" scope is now \"user\"\n\n## 0.2.47\n\n- Press Tab to auto-complete file and folder names\n- Press Shift + Tab to toggle auto-accept for file edits\n- Automatic conversation compaction for infinite conversation length (toggle with /config)\n\n## 0.2.44\n\n- Ask Claude to make a plan with thinking mode: just say 'think' or 'think harder' or even 'ultrathink'\n\n## 0.2.41\n\n- MCP server startup timeout can now be configured via MCP_TIMEOUT environment variable\n- MCP server startup no longer blocks the app from starting up\n\n## 0.2.37\n\n- New /release-notes command lets you view release notes at any time\n- `claude config add/remove` commands now accept multiple values separated by commas or spaces\n\n## 0.2.36\n\n- Import MCP servers from Claude Desktop with `claude mcp add-from-claude-desktop`\n- Add MCP servers as JSON strings with `claude mcp add-json <n> <json>`\n\n## 0.2.34\n\n- Vim bindings for text input - enable with /vim or /config\n\n## 0.2.32\n\n- Interactive MCP setup wizard: Run \"claude mcp add\" to add MCP servers with a step-by-step interface\n- Fix for some PersistentShell issues\n\n## 0.2.31\n\n- Custom slash commands: Markdown files in .claude/commands/ directories now appear as custom slash commands to insert prompts into your conversation\n- MCP debug mode: Run with --mcp-debug flag to get more information about MCP server errors\n\n## 0.2.30\n\n- Added ANSI color theme for better terminal compatibility\n- Fixed issue where slash command arguments weren't being sent properly\n- (Mac-only) API keys are now stored in macOS Keychain\n\n## 0.2.26\n\n- New /approved-tools command for managing tool permissions\n- Word-level diff display for improved code readability\n- Fuzzy matching for slash commands\n\n## 0.2.21\n\n- Fuzzy matching for /commands\n",
  "changelogLastFetched": 1755964400967,
  "fallbackAvailableWarningThreshold": 0.2,
  "shiftEnterKeyBindingInstalled": true,
  "lastReleaseNotesSeen": "1.0.89",
  "hasUsedBackslashReturn": true,
  "s1mAccessCache": {
    "3e25f271-75dd-4066-8506-a8200882f46e": {
      "hasAccess": false,
      "timestamp": 1755964188052
    }
  },
  "hasOpusPlanDefault": false
}